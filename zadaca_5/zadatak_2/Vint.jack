class Vint
{
    field int capacity;
    field Array vector;

    method int DvaPot(int n)
    {
        var int br, i;
        let br = 1;
        while (i < n)
        {
            let br = br * 2;
            let i = i + 1;
        }

        return br;
    }

    method Array getVector()
    {
        return vector;
    }

    method void Vprint()
    {
        var int i;
        while(i < capacity)
        {
            do Output.printInt(vector[i]);
            do Output.printString(" ");
            let i = i + 1;
        }

        do Output.println();

        return;
    }

    method int len()
    {
        return capacity;
    }

    constructor Vint new(int n)
    {
        if(n < 0)
        {
            let capacity = 1;
            let vector = Array.new(1);
            return this;
        }

        let capacity = DvaPot(n);
        let vector = Array.new(capacity);
        return this;
    }

    method void set(int k, int v)
    {
        if ((k < capacity) & (k > -1))
        {
            let vector[k] = v;
            return;
        }

        do Output.printString("Nemoguce staviti element na taj indeks");
        do Output.println();

        return;
    }

    method int get(int k)
    {  
        if ((k < capacity) & (k > -1))
        {
            return vector[k];
        }
        
        do Output.printString("Nemoguce dohvatiti element");
        do Output.println();

        return -1;   
    }

    method void resize(int m)
    {
        var int minimumm, i;
        var Array tempArray;

        if(m < 0)
        {
            do vector.dispose();
            let capacity = 1;
            let vector = Array.new(1);
            return;
        }

        let minimumm = Math.min(DvaPot(m), capacity);

        let tempArray = Array.new(DvaPot(m));

        while (i < minimumm)
        {
            let tempArray[i] = vector[i];
            let i = i + 1;
        }

        do vector.dispose();
        let capacity = DvaPot(m);
        let vector = tempArray;        
        return;
    }

    function bool is_eq(Vint a, Vint b)
    {
        var int i;
        
        if (~(a.len() = b.len()))
        {
            return false;
        }

        while(i < a.len())
        {
            if (~(a.get(i) = b.get(i)))
            {
                return false;
            }
            let i = i + 1;
        }

        return true;

    }   

    function bool elems (Vint a, Vint b)
    {
        var Array arrA, arrB;
        var int lenA, lenB, i;
        
        let lenA = a.len();
        let lenB = b.len();

        if (lenA = lenB)
        {
            let arrA = a.getVector();
            let arrB = b.getVector();

            do QuickSort.QSort(arrA, 0, a.len() - 1);
            do QuickSort.QSort(arrB, 0, b.len() - 1);

            while(i < lenA)
            {
                if (~(arrA[i] = arrB[i]))
                {
                    return false;
                }

                let i = i + 1;
            }

            return true;
        }

        return false;
    }


}